"use strict";(self.webpackChunkreact_native_screenguard_docs=self.webpackChunkreact_native_screenguard_docs||[]).push([[820],{7640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=t(4848),r=t(8453);const s={sidebar_position:1},o="Limitation",c={id:"limitation/limitation",title:"Limitation",description:"- From v0.3.6 and above, callbacks will not be activated on all functions. You may have to activate it yourself by using registerScreenshotEventListener or registerScreenRecordingEventListener instead.",source:"@site/docs/limitation/limitation.md",sourceDirName:"limitation",slug:"/limitation/",permalink:"/react-native-screenguard/docs/limitation/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/react-native-screenguard/docs/testing/"}},a={},d=[];function l(e){const n={a:"a",code:"code",h1:"h1",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"limitation",children:"Limitation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["From ",(0,i.jsx)(n.code,{children:"v0.3.6"})," and above, callbacks will not be activated on all functions. You may have to activate it yourself by using ",(0,i.jsx)(n.a,{href:"/react-native-screenguard/docs/usages-and-apis/register-screenshot-event-listener",children:"registerScreenshotEventListener"})," or ",(0,i.jsx)(n.a,{href:"/react-native-screenguard/docs/usages-and-apis/register-screen-recording-event-listener",children:"registerScreenRecordingEventListener"})," instead."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"This library support blocking screenshot for iOS 13+, Android 8+ only."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remember to call a function only ",(0,i.jsx)("b",{children:"ONCE"})," and don't combine with other register functions for limitting errors and unexpected problems might happened during testing."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Please remember that text input will be temporary disabled until calling ",(0,i.jsx)(n.code,{children:"unregister"})," on Android except ",(0,i.jsx)(n.code,{children:"registerWithoutEffect"}),". Workaround: You can use your own custom-made keyboard if included in your project, or find some react native libs which provide custom keyboard ui like ",(0,i.jsx)(n.code,{children:"wix/react-native-ui-libs"})," could solve this."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["On Android, the ",(0,i.jsx)(n.code,{children:"registerScreenshotEventListener"})," method will not function when screenshot blocking is activated. This is because the Android platform inherently blocks all standard screenshot attempts, including those from system apps and button combinations. However, the event might still be received if the user takes a screenshot using a third-party screenshot or screen recording app (such as AZ Screen Recorder, XRecorder, etc.)."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);